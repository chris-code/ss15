import base64
from Crypto.Cipher import AES
from Crypto.Hash import MD5
import imp
import random


solution_profiling = """
j2DubDEekoKegD/g4oSsAwXbHzHopkNGxOMSmOk9Q2tL6BS0kdLRrSoomA5JnnLI+9QYyaLEJ3dA
z6P7EPeipk/CnavEWZV8QvUdEu0SDUs2rG6/1ZhOxZ+yz6kZiOjz8ciREgFbVw95Oek/GGlNjCyi
9Ojo3CxyWkGGtc7o8oDgJqE3J6EDlhuyxIdQEuUuyHMYZBTJS473NXkQ736+H59cj85LbTU5DoZ2
A/0kacLMz/HFcgv/xVL/h4idXuh8ifFsaESLAp0pNKi4kMuOrfk/6oyN3FIwMCxMfdyu9wqcvCmp
3OpntET94GHYvQz6tF6Ulq5p4GP8uq8V2QseXWEnS4ZgxUTlaEslwausxN2KNtIUQtTlF3XnqLNt
85BByqcy0TBv9g1bM74L5wi7FNaV2wt7LqCPjY6t9p1vJLeLI8z2vwb91NCWVp6GoT+ClKtedRro
MhzAN0yinQVWbwzKVC+fo8NLHfIb0Nd8K8NS8OLCkNEEVljgeehUTHHc8edct+c5r/CS+zstt0HJ
taYoTM2/PADOneQhmQ+BtuxpYb6HcW30XcnpFlbl5WftTIEiBWYAgM6bmjHUBaGR6FHjYSIiDF7e
P+Zv8jMOCpnovZBeyonA52VSG3M1sDTNovZrlIKwnouRuGJbw0ofjX86hfzO1pxAX2gQKR6pO6HV
7fMC/2J+GJcS76KfuS/90lswvx30HX9rLE1RJ0OWP4zoYpaW3amQQtkcUKkX2IubtdiMSytgAsgm
nyB5aG4Ah/lGRDHvzusimXbIlTGsB2tbAgeGO7I19ejuW2TIM3BK3QueAspbGxqrBr1gKNerngMP
LFir+N6CxYPIosppfAsGkjBTqGChCmxQUD4TvjQ="""
    

def _pad16(s):
    """Pad the string with spaces until its length is a multiple of 16.
    It is used before encoding a string with AES.
    """
    l = 16 - len(s) % 16
    if l < 16:
        s = s + ''.join([' '] * l)
    return s


def _generate_passphrase():
    """
    Generates a random password.
    """
    consonants = 'bcdfghjklmnpqrstvwxyz'
    vowels = 'aeiou'
    letters = ''.join(random.choice(consonants + consonants.upper()) + random.choice(vowels + vowels.upper()) for _ in range(2))
    digits = '%04d' % random.randint(0, 9999)
    return letters + digits


def _highlight_source(src):
    """
    When packages 'pygments' is installed, the given source is formatted as
    Python source and colors are formatted for console output.
    """
    try:
        imp.find_module('pygments')
        from pygments import highlight
        from pygments.lexers.python import NumPyLexer
        from pygments.formatters.terminal import TerminalFormatter
        src = highlight(src, NumPyLexer(), TerminalFormatter(encoding='guess'))
    except ImportError:
        pass
    return src
    
    
def encrypt_solution(src, passphrase=None):
    """Prints an encrypted and base64-coded string.
    If no passphrase is given, a new one is generated."""
    if passphrase is None:
        passphrase = _generate_passphrase()
    src = 'OK!' + src
    src = _pad16(src)
    key_hash = MD5.new(passphrase).hexdigest()
    aes = AES.new(key_hash)
    encrypted_src = aes.encrypt(src)
    encrypted_src = base64.encodestring(encrypted_src)
    print encrypted_src
    print 'passphrase: ', passphrase


def decrypt_solution(encrypted_src, passphrase):
    """Takes the passphrase and encrypted source generated by encrypt_solution and
    prints the decrypted source."""
    key_hash = MD5.new(passphrase).hexdigest()
    aes = AES.new(key_hash)
    src = base64.decodestring(encrypted_src)
    src = aes.decrypt(src)
    if src[:3] == 'OK!':
        print _highlight_source(src[3:])
    else:
        print '[wrong passphrase]' 


if __name__ == '__main__':
    encrypt_solution(src='import numpy as np', passphrase=None)
    #decrypt_solution(encrypted_src='44zzPpwOIYW7zo1CHsaM+YSI5u1Xercq5yw+3XUM5Q8=', passphrase='boZE3027')
